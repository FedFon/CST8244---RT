#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <pthread.h>
#include <semaphore.h>

void sigusr1();
void sigusr2();

volatile sig_atomic_t usr1happ;
volatile sig_atomic_t usr2happ;
int main(void) {
	struct sigaction sa, sb;

	sa.sa_handler = sigusr1;
	sa.sa_flags = 0;
	sigemptyset(&sa.sa_mask);

	sigaction(SIGUSR1, &sa, NULL);

	sb.sa_handler = sigusr2;
	sb.sa_flags = 0;
	sigemptyset(&sb.sa_mask);

	sigaction(SIGUSR2, &sb, NULL);

	printf("PID = %d Running...", getpid());

	for(;;){
		if(usr1happ == 1){
			printf("PID = %d Exiting.", getpid());
		}
		if(usr2happ == 1){

			printf("PID = %d Received USR2. I now have max priority", getpid());
		}

	}
	return EXIT_SUCCESS;
}

void sigusr1(){
	usr1happ = 1;
}

void sigusr2(){
	usr2happ = 1;
}

