/*
 ** fork.c -- demonstrates usage of fork() and wait()
 **
 ** Read:	http://beej.us/guide/bgipc/html/single/bgipc.html#fork
 ** Source:	http://beej.us/guide/bgipc/examples/fork1.c
 **
 */

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

void sigusr_handler();

volatile sig_atomic_t usr1Happened = 0;

int main(void) {

	struct sigaction sa;/*sigaction struct*/

	sa.sa_handler = sigusr_handler;/*setting handler*/
	sa.sa_flags = 0; /*or SA_RESTART*/
	sigemptyset(&sa.sa_mask);/*remove all signals*/

	sigaction(SIGUSR1, &sa, NULL);/*installing signal SIGUSR1 to handler*/



	int rv;
	int numChildren = 0;

	printf("Enter the number of children:\n");
	scanf("%d", &numChildren);

	pid_t pid[numChildren];

	printf("PID = %d: Parent running...\n", getpid());

	for (int i = 0; i <= numChildren; i++) {
		pid[i] = fork();

		if (pid < 0) {
			perror("fork"); /* something went wrong */
			exit(1); /* parent exits */
		} else if (pid == 0) {
			printf("PID = %d: Child running...\n", getpid());
			for (;;) {
				if (usr1Happened == 1) {/*signal passed*/
					printf("PID = %d: Child received USR1.\n", getpid());/*inform user*/
					break;/*exit loop*/
				}
			}
			printf("PID = %d: Child exiting.\n", getpid());
			exit(rv);

		} else {
			wait(&rv);
			printf("PID = %d: Children finished, parent exiting.\n", getpid());
		}
	}

	/*
	 switch (pid = fork()) {

	 case -1:



	 case 0:


	 default:


	 }*/
	return 0;
}

void sigusr_handler() {/*handler just sets usrHappened to 1*/
	usr1Happened = 1;
}
